import { SanityImageSource } from "@sanity/asset-utils";
import { client, urlFor } from "@/app/api/client";
import { useNextSanityImage } from "next-sanity-image";
import Img, { ImageProps } from "next/image";

export interface ICustomImage extends Omit<ImageProps, "src"> {
  alt: string;
  image: SanityImageSource;
  figureClassName?: string;
  quality?: number;
  priority?: boolean; // Optional: for above-the-fold images
}

export const SanityImage: React.FC<ICustomImage> = (props) => {
  const {
    image,
    alt,
    figureClassName,
    quality = 90, // Default: good balance of size vs. quality
    priority = false, // Default: lazy load unless specified
    ...rest
  } = props;

  // Handle case where no image is provided
  if (!image) {
    return (
      <figure className={figureClassName}>
        <Img
          src="/placeholder.jpg" // Fallback image
          alt={alt || "Placeholder image"}
          fill
          style={{ objectFit: "cover" }}
        />
      </figure>
    );
  }

  // Use next-sanity-image with custom options
  const { src, width: sanityWidth, height: sanityHeight } = useNextSanityImage(
    client,
    image,
    {
      imageBuilder: (imageUrlBuilder) =>
        imageUrlBuilder
          .format("webp") // Use WebP for smaller files
          .quality(quality) // Apply quality setting
          .fit("max"), // Scale proportionally
      // Automatically generate blur placeholder
    }
  );

  return (
    <figure
      className={figureClassName}
      style={{
        position: "relative",
        width: "100%",
        overflow: "hidden",
        aspectRatio:
          sanityWidth && sanityHeight
            ? `${sanityWidth} / ${sanityHeight}`
            : undefined,
      }}
    >
      <Img
        src={src} // Use the optimized src from useNextSanityImage
        alt={alt}
        width={sanityWidth} // Use Sanity-provided dimensions
        height={sanityHeight}
        placeholder="blur" // Auto-generated by useNextSanityImage
        blurDataURL={urlFor(image)
          .width(24)
          .height(24)
          .blur(10)
          .quality(10)
          .url()} // Fallback if needed
        style={{ objectFit: "cover" }}
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" // Simplified, see below
        quality={quality}
        priority={priority}
        loading={priority ? "eager" : "lazy"}
        {...rest}
      />
    </figure>
  );
};
